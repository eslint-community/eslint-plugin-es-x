/**
 * @author Yosuke Ota <https://github.com/ota-meshi>
 * See LICENSE file in root directory for full license.
 */
"use strict"

const fs = require("fs")
const path = require("path")
const { ESLint } = require("eslint")
const { categories } = require("./rules")
const Root = path.resolve(__dirname, "../lib/configs/flat")

function wrapCode(code) {
    return `/**
 * DON'T EDIT THIS FILE.
 * This file was generated by "scripts/update-lib-flat-configs.js" script.
 */
"use strict"

module.exports = ${code}
`
}

/** @type {Record<string, import("./rules").Category>} */
const configs = {}
for (const { configName, rules, ...config } of Object.values(categories)) {
    if (configs[configName]) {
        configs[configName].rules.push(...rules)
    } else {
        configs[configName] = {
            ...config,
            configName,
            rules: [...rules],
        }
    }
}

for (const {
    edition,
    rules,
    configName,
    aboveConfigName,
    specKind,
} of Object.values(configs)) {
    if (!configName) {
        continue
    }
    const ruleSetting = rules.map((r) => `"es-x/${r.ruleId}":"error"`).join(",")

    fs.writeFileSync(
        path.join(Root, `${configName}.js`),
        wrapCode(`{ 
    plugins: { get "es-x"() { return require("../../index.js") } },
    rules: { ${ruleSetting} }
}`),
    )
    if (aboveConfigName) {
        const extendSetting = Object.values(categories)
            .filter(
                (c) =>
                    c.edition >= edition &&
                    c.specKind === specKind &&
                    !c.experimental &&
                    c.configName,
            )
            .map((c) => `...require("./${c.configName}").rules`)
            .join(",")
        fs.writeFileSync(
            path.join(Root, `${aboveConfigName}.js`),
            wrapCode(`{
    plugins: { get "es-x"() { return require("../../index.js") } },
    rules: {${extendSetting}}
}`),
        )
    }
}

format()

async function format() {
    ESLint.outputFixes(
        await new ESLint({ fix: true }).lintFiles(["lib/configs/flat"]),
    )
}
